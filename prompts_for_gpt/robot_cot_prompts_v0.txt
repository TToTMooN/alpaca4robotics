You will be given a set of tasks in a robotic environment.
You are asked to come up with a set of task instructions and corresponding responses for each of them.
Some of them are long-horizon tasks request multiple reasoning steps, so we are generating multi-turn instructions in a chain of thought way. 
These task instructions will be given to a GPT model and we will evaluate the GPT model for completing the instructions.

Here is the information about the {environment}. 

The environment is called "Two Block World" 
There is a 7DOF Franka robot with a parallel gripper.Â 
There are two blocks, {block A} and {block B}, with randomized sizes and density in the environment.
The Franka robot has a force sensor on the end effector.
The Franka robot is mounted on a table.
The blocks are initialized at a random position on the table.
The observation space is a 29 dimension vector, consisting of:
block A position(3), block A orientation(4), block B position(3), block B orientation(4), end effector position(3), end effector orientation(4), left finger position(1), right finger position(1), left finger force(3), right finger force(3)   

The robot is given a long horizon task: {TASK}. 
The instructions and responses happen when the robot is trying to solve this specific {TASK}, and ask a chatbot guider.
Each instruction data pair consists of three parts: {instruction}, {input}, {output}
The {instruction} consists of the question asked by the robot to help make decisions, it will attach the previous step {instruction}, {input}, {output} at the begining of instruction if it's not the first round of chat.

The {input} consists of the current observation of the robot. If it's not provided, it will be <noinput>.

The {output} consists of two parts <verbal> and <action>.
    - The <verbal> part include an description of the reasoning process and the current planned action.
    - The <action> part include a downstream action provided in the function lists executable by the robot. 

The {instruction} of each task consists should consists of the following standard questions in order to provide chain of thought instructions pairs.
1. Is the current information enough to solve the task? If not, what information is missing?
2. What are the actions the robot should take to gather information?
3. What are the actions the robot should take to solve the task?
For the 1st question, the <action> output part should be <nooutput>, only <verbal> output is important. For the other questions, both <verbal> and <action> output parts are important.
The 2nd question usually happens when the answer of previous round question 1 is no. The 3rd question usually happens when the answer of previous round question 1 is yes.
There can be different answers to the same question depending on different observation and previous collected information, but the answers should be reasonable. You can imagine the robot is facing different situations when asking the questions.

Below is the list of {TASK}s used in the generated instructions:
{TASK_LIST_PLACEHOLDER}

Below is the list of {FUNCTION}s provided in the robot skill library in this environment.
{FUNCTION_LIST_PLACEHOLDER}

{TRAJECTORY_PLACEHOLDER}

Here are some basic requirements for the generated instructions:
1. A GPT language model should be able to complete the instruction. For example, do not ask the assistant to create any visual or audio output. For another example, do not ask the assistant to wake you up at 5pm or set a reminder because it cannot perform any action.
2. The instructions should be in English.
3. The index of instructions for different tasks are continous. For example, if the last instruction for task 1 is 10, the first instruction for task 2 should be 11.
3. The i-th response for task {TASK} need to satisfy the following format: 
// start of instruction pair i, not including this line.
###
i.
<Task> {task}
<Instruction> {instruction}
<Input> {input}
<Output>
[verbal] {verbal output}
[action] {list of function output}
// end of instruction pair i, not including this line.

4. The format of {instruction}: If it is first round, then it's just one of the questions listed above. If it's not the first round, then it should be the question attached with the previous N step outputs "Prev:\n(A_j:{output}_j)\n" where j=1, ..., N at the begining of instruction. 
5. The format of {input} will be a vector of robot observation. The input should involve all the states in the robot obvervation. Use actual numbers in the generated instruction pairs.
6. The format of {verbal output} will be a sentence explain the current reasoning process and the current planned action. It is used for in-context learning for multi-turn instructions.
7. The format of {action output} will be list of {function name} {function parameter} wrapped by []. Each element should be in a python executable form, don't use placeholders as parameters, output the numbers if the parameters are vectors.
8. Generate exact 5 instruction pair data for each task.
9. Each instruction pair should be separated by a line of "###" at the beginning.

Examples of instruction pairs are given below. Note that this could be instructions under different {TASK}s. You need to modify the instruction pairs according to the {TASK}.
